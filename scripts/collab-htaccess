#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
collab-htaccess: Filesystem dump of collab instance meta / htpasswd / htaccess

@copyright: 2008-2010 by Marko Laakso <fenris@iki.fi>
@license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

verbose = False

import os
import sys
import re
import difflib
import string
import signal
import atexit
import time

def cleanup_handler(signum, frame):
    sys.exit(0)

def delpid():
    try:
        os.remove(mypidfile)
    except OSError:
        pass

import posix, pwd

import ConfigParser

config = ConfigParser.RawConfigParser()
config.read('/etc/local/collab/collab.ini')

mylogconf = config.get('collab', 'logconf')
mybaseinstancedir = config.get('collab', 'baseinstancedir')
myhtpasswd = config.get('collab', 'htpasswd')
myhtgroup = config.get('collab', 'htgroup')
myhtmldir = config.get('collab', 'htmldir')
mywikidir = config.get('collab', 'wikidir')
mypiddir = config.get('collab', 'piddir')

mypidfile = os.path.join(mypiddir, "collab-htaccess.pid")

try:
    f = file(mypidfile, 'r')
    pid = int(f.read().strip())
    statinfo = os.fstat(f.fileno())
    pidage = time.time() - statinfo.st_ctime
    f.close()

    if pidage > 60 * 5:
        print "Walking over pid=%d with age=%d (secs) in pidfile=%s" \
              % (pid, pidage, mypidfile)
    else:
        sys.exit(1)
except IOError:
    pid = None

signal.signal(signal.SIGTERM, cleanup_handler)
atexit.register(delpid)

pid = str(os.getpid())
f = open(mypidfile, 'w+')
f.write(pid + '\n')
f.close()

from MoinMoin import log
log.load_config(mylogconf) 

from MoinMoin.user import User, getUserList, isValidName
from MoinMoin import wikidicts
from MoinMoin.config import multiconfig
from MoinMoin.request.request_cli import Request

from graphingwiki.editing import metatable_parseargs, get_metas

def diffandstore(filename, newtext, dryrun=False):

    msg = []

    try:
        f = open(filename, 'r')
        oldtext = f.read()
        f.close()
    except IOError:
        oldtext = ''

    newtext = newtext.encode('iso8859-15')
    
    if oldtext != newtext:
        diff = difflib.ndiff(oldtext.splitlines(1), newtext.splitlines(1))
        for line in diff:
            if line[:1] not in string.whitespace:
                msg.append(line)
        if not dryrun:
            f = open(filename, 'w')
            f.write(newtext)
            f.close()

    return msg

###### htgroup

content = "dummygroup: dummyuser"
msg = diffandstore(myhtgroup, content)

if msg:
    print "Access DIFF for .htgroup:"
    sys.stdout.writelines(msg)

###### htpasswd

allusers = { }

os.chdir(mybaseinstancedir)
sys.path.insert(0, os.path.join(mybaseinstancedir, 'config'))

# Make a new request for the page
req = Request(pagename='FrontPage')

# Auth
import posix, pwd
req.user = User(req, auth_username=pwd.getpwuid(posix.getuid())[0])

content = ""

for id in getUserList(req):
    myuser = User(req, id=id)
    myuser.load_from_id()
    if myuser.valid and isValidName(req, myuser.name) and myuser.enc_password:
        content = content + myuser.name + ":" + \
                  myuser.enc_password + os.linesep
        allusers[myuser.name] = 0

msg = diffandstore(myhtpasswd, content)

if msg:
    print "Access DIFF for .htpasswd:"
    sys.stdout.writelines(msg)

req.finish()

sys.path.remove(os.path.join(mybaseinstancedir, 'config'))

###### htaccess & CollabFacts

os.chdir(myhtmldir)
username = pwd.getpwuid(posix.getuid())[0]

for dent in os.listdir("."):
    mydata = os.path.join(mywikidir, dent)
    mytemplate = os.path.join(mydata, 'collab-htaccess-template')
    myhtaccess = os.path.join(dent, '.htaccess')
    mytitle = os.path.join(dent, '.title')
    mymotd = os.path.join(dent, '.motd')
    myurl = os.path.join(dent, '.url')
    
    if not os.path.isdir(dent) or not os.path.isdir(mydata):
        continue

    if not os.path.isfile(mytemplate):
        continue

    sys.path.insert(0, os.path.join(mydata, 'config'))

    multiconfig._url_re_cache = None
    multiconfig._farmconfig_mtime = None
    multiconfig._config_cache = {}

    import farmconfig
    reload(farmconfig)

    req = Request(pagename='AccessGroup')
    req.user = User(req, auth_username=username)

    msg = []
    members = []

    isgroup = req.cfg.cache.page_group_regexact.search
    
    for member in req.dicts.members("AccessGroup"):
        if isgroup(member):
            continue
        members.append('require user ' + re.sub('[^\w@.\-\']', '', member))
        if member in allusers:
            allusers[member] += 1
        elif verbose:
            print >> sys.stderr, "PHANTOM: " + member + " in " + dent
        
    members.sort()

    f = open(mytemplate, 'r')
    newtext = f.read()
    f.close()

    for member in members:
        newtext = newtext + member + '\n'

    msg.extend(diffandstore(myhtaccess, newtext))
                
    metas = get_metas(req, 'CollabFacts', ['name', 'description', 'URL'])
    if metas['name']:
        val = metas['name'][0]
        msg.extend(diffandstore(mytitle, val  + '\n'))
    if metas['description']:
        val = metas['description'][0]
        msg.extend(diffandstore(mymotd, val  + '\n'))
    if metas['URL']:
        val = metas['URL'][0]
        msg.extend(diffandstore(myurl, val + '\n'))

    if msg:
        print '*** ' + dent + ' ***'
        sys.stdout.writelines(msg)

    req.finish()

    sys.path.remove(os.path.join(mydata, 'config'))

if verbose:
    for user in allusers:
        if allusers[user] == 0:
            print >> sys.stderr, "ORPHAN: " + user
