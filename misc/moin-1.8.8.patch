diff -up ./MoinMoin/user.py-orig ./MoinMoin/user.py
--- ./MoinMoin/user.py-orig	2010-09-10 19:50:18.000000000 +0300
+++ ./MoinMoin/user.py	2010-09-10 19:52:38.000000000 +0300
@@ -157,9 +157,9 @@ def encodePassword(pwd, salt=None):
         salt = random_string(20)
     assert isinstance(salt, str)
     hash = hash_new('sha1', pwd)
-    hash.update(salt)
+    #hash.update(salt)
 
-    return '{SSHA}' + base64.encodestring(hash.digest() + salt).rstrip()
+    return '{SHA}' + base64.encodestring(hash.digest()).rstrip()
 
 
 def normalizeName(name):
@@ -516,7 +516,7 @@ class User:
         if epwd[:5] == '{SHA}':
             enc = '{SHA}' + base64.encodestring(hash_new('sha1', password.encode('utf-8')).digest()).rstrip()
             if epwd == enc:
-                data['enc_password'] = encodePassword(password) # upgrade to SSHA
+                #data['enc_password'] = encodePassword(password) # upgrade to SSHA
                 return True, True
             return False, False
 
diff -up ./MoinMoin/xmlrpc/__init__.py-orig ./MoinMoin/xmlrpc/__init__.py
--- ./MoinMoin/xmlrpc/__init__.py-orig	2010-10-26 10:58:35.000000000 +0300
+++ ./MoinMoin/xmlrpc/__init__.py	2010-10-26 10:59:59.000000000 +0300
@@ -39,6 +39,32 @@ from MoinMoin.action import AttachFile
 from MoinMoin import caching
 from MoinMoin import session
 
+def is_login_required(request):
+    login_required = True
+    env = request.env                      
+
+    from MoinMoin.auth.http import HTTPAuth
+    from MoinMoin.auth.sslclientcert import SSLClientCertAuth
+
+    # Get all the authentication methods used in the config
+    auth = getattr(request.cfg, 'auth', [])
+
+    for method in auth:
+        # If we're using HTTP auth, and the server has authenticated
+        # the user successfully, do not require another login
+        if isinstance(method, HTTPAuth):
+            if env.get('REMOTE_USER', ''):
+               login_required = False
+               break
+        # If we're using SSL client certificate auth, and the server
+        # has authenticated the user successfully, do not require
+        # another login
+        elif isinstance(method, SSLClientCertAuth):
+            if env.get('SSL_CLIENT_VERIFY', 'FAILURE') == 'SUCCESS':
+               login_required = False
+               break
+
+    return login_required
 
 class XmlRpcAuthTokenIDHandler(session.SessionIDHandler):
     def __init__(self, token=None):
@@ -135,7 +161,14 @@ class XmlRpcBase:
             else:
                 # overwrite any user there might be, if you need a valid user for
                 # xmlrpc, you have to use multicall and getAuthToken / applyAuthToken
-                self.request.user = user.User(self.request, auth_method='xmlrpc:invalid')
+                # FIXME: Only do this if there is no valid user
+                #        or if login to the wiki is required
+                login_required = is_login_required(self.request)
+                if (not self.request.user or
+                    not self.request.user.valid or
+                    login_required):
+                    self.request.user = user.User(self.request, 
+                                                  auth_method='xmlrpc:invalid')
 
                 data = self.request.read(self.request.content_length)
 
@@ -691,8 +724,14 @@ class XmlRpcBase:
         id_handler = XmlRpcAuthTokenIDHandler()
 
         u = self.request.cfg.session_handler.start(self.request, id_handler)
-        u = self.request.handle_auth(u, username=username,
-                                     password=password, login=True)
+        login_required = is_login_required(self.request)
+
+        if login_required:
+            u = self.request.handle_auth(u, username=username,
+                                         password=password, login=True)
+        else:
+            u = self.request.handle_auth(u, username=username,
+                                         password=password)
 
         self.request.cfg.session_handler.after_auth(self.request, id_handler, u)
 
diff -up ./MoinMoin/auth/http.py-orig ./MoinMoin/auth/http.py
--- ./MoinMoin/auth/http.py-orig   2010-12-15 12:01:30.719630611 +0200
+++ ./MoinMoin/auth/http.py        2010-12-15 12:03:21.269298026 +0200
@@ -84,7 +84,7 @@ class HTTPAuth(BaseAuth):
                 # when using http auth, we have external user name and password,
                 # we don't use the moin user profile for those attributes.
                 u = user.User(request, auth_username=username,
-                              auth_method=self.name, auth_attribs=('name', 'password'))
+                              auth_method=self.name, auth_attribs=('name'))
 
         logging.debug("u: %r" % u)
         if u and self.autocreate:

diff -up ./MoinMoin/theme/modernized.py-orig ./MoinMoin/theme/modernized.py
--- ./MoinMoin/theme/modernized.py-orig	2010-06-05 19:14:34.000000000 +0300
+++ ./MoinMoin/theme/modernized.py	2011-11-21 17:56:05.435819000 +0200
@@ -20,6 +20,8 @@ class Theme(ThemeBase):
         # FileAttach
         'attach':     ("%(attach_count)s",       "moin-attach.png",   16, 16),
         'info':       ("[INFO]",                 "moin-info.png",     16, 16),
+        'edit':       (_("Edit"),                "moin-edit.png",     12, 12),
+        'formedit':   (_("FormEdit"),            "moin-news.png",     12, 12),
         'attachimg':  (_("[ATTACH]"),            "attach.png",        32, 32),
         # RecentChanges
         'rss':        (_("[RSS]"),               "moin-rss.png",      16, 16),

diff -r d8ac2a401f8f -r 8b17f7e86ba4 MoinMoin/web/static/htdocs/applets/moinFCKplugins/selection/fckplugin.js
--- ./wiki/htdocs/applets/moinFCKplugins/selection/fckplugin.js	Mon Jan 09 21:26:50 2012 +0100
+++ ./wiki/htdocs/applets/moinFCKplugins/selection/fckplugin.js	Sat Jan 14 19:14:28 2012 +0100
@@ -321,6 +321,8 @@
   FCKSelection.GetStartNode = function()
     {
       var oSelection = FCKSelection.GetSelection();
+      if (oSelection.rangeCount == 0) // this fixes Chrome Browser exception on FCKeditor init
+        return null;
       // startContainer returns the parent of the first node in the selection
       var oContainer = oSelection.getRangeAt(0).startContainer;
       // The offset within the startContainer where the range starts
@@ -343,6 +345,8 @@
   FCKSelection.GetEndNode = function()
   {
     var oSelection = FCKSelection.GetSelection();
+    if (oSelection.rangeCount == 0) // this fixes Chrome Browser exception on FCKeditor init
+      return null;
     var oContainer = oSelection.getRangeAt(0).endContainer;
     var iOffset = oSelection.getRangeAt(0).startEndset;

diff -up ./wiki/htdocs/common/js/common.js.orig ./wiki/htdocs/common/js/common.js
--- ./wiki/htdocs/common/js/common.js.orig	2010-06-05 19:14:35.000000000 +0300
+++ ./wiki/htdocs/common/js/common.js	2012-01-23 13:48:50.727695002 +0200
@@ -98,9 +98,6 @@ function can_use_gui_editor() {
     if ( window.opera && window.opera.version && parseFloat( window.opera.version() ) >= 9.5 )
         return true ;
 
-/*
-  // disable safari : until fck devteam fix http://dev.fckeditor.net/ticket/2333
-  
     // Adobe AIR
     // Checked before Safari because AIR have the WebKit rich text editor
     // features from Safari 3.0.4, but the version reported is 420.
@@ -109,8 +106,11 @@ function can_use_gui_editor() {
 
     // Safari 3+
     if ( sAgent.indexOf( ' applewebkit/' ) != -1 )
-        return ( sAgent.match( / applewebkit\/(\d+)/ )[1] >= 522 ) ;    // Build must be at least 522 (v3)
-*/
+	if ( sAgent.indexOf( ' chrome/' ) != -1 )
+	    return ( sAgent.match( / chrome\/(\d+)/ )[1] >= 15 ) ;    // Chrome/Chromium version must be at least 15.x
+	else
+	    return ( sAgent.match( / applewebkit\/(\d+)/ )[1] >= 522 ) ;    // Build must be at least 522 (v3)
+
     return false ;
 
 }
